apply plugin: 'com.android.application'
/*
// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
*/
android {
    compileSdkVersion versionCompiler
    buildToolsVersion versionBuildTool

    defaultConfig {
        applicationId "sermk.pipi.pilauncher"
        minSdkVersion versionMinSdkTarget
        targetSdkVersion versionTarget
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            cmake {
                cppFlags "-fexceptions -std=c++11"
                abiFilters 'arm64-v8a'
            }
        }

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
/*
    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
*/
    buildTypes {
        release {
            minifyEnabled false
            //signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            splits {
                abi {
                    enable true
                    reset()
                    include 'arm64-v8a'
                    universalApk false
                }
            }
        }

        debug {
            splits {
                abi {
                    enable true
                    reset()
                    include 'arm64-v8a'
                    universalApk false
                }
            }
        }
    }

    sourceSets { main { jni.srcDirs = ['src/main/cpp'] } }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'sermk.pipi.pilauncher/sermk.pipi.pilauncher.LauncherAct'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':libuvccamera')
    implementation project(':openCVLibrary330')
    implementation project(':PiLib')

    compile 'com.orhanobut:logger:2.1.1'
    compile 'com.google.code.gson:gson:2.8.2'
    compile 'org.greenrobot:eventbus:3.1.1'

    testImplementation 'junit:junit:4.12'
    androidTestCompile 'com.android.support:support-annotations:' + rootProject.supportLibVersion;
    androidTestCompile 'com.android.support.test:runner:' + rootProject.runnerVersion;
    androidTestCompile 'com.android.support.test:rules:' + rootProject.rulesVersion;
    androidTestCompile 'com.android.support.test.espresso:espresso-core:' + rootProject.espressoVersion;

}
